using BusinessObject.DTO;

namespace DataAccess.InterfaceRepository { public interface IRequestOverTimeRepository { Task<object> ApproveOvertimeRequestAndLogHours(Guid requestId, Guid? employeeIdDecider); Task<object> CancelApprovedOvertimeRequest(RequestReasonDTO requestObj); Task<object> CreateRequestOvertime(CreateRequestOverTimeDTO dto, Guid employeeId); Task<object> DeleteOvertimeRequest(Guid requestId); Task<object> DeleteOvertimeRequestIfNotApproved(Guid requestId, Guid? employeeIdDecider); Task<object> EditRequestOvertimeOfEmployee(EditRequestOverTimeDTO dto, Guid employeeId); Task<List<RequestOverTimeDTO>> GetAllAsync(); List<RequestOverTimeDTO> GetAllRequestOverTime(string? nameSearch, int status, DateTime month, Guid? employeeId); Task<dynamic> GetEmployeeOvertimeSummaryAndManagerName(Guid employeeId); Task<RequestOverTimeDTO> GetRequestOverTimeById(Guid requestId); object GetRequestOverTimeOfEmployeeById(Guid employeeId); Task<object> RejectOvertimeRequest(RequestReasonDTO requestObj); Task<bool> SoftDeleteAsync(Guid id); } }